<?npl
--[[
Title: nplcad.page
Author: leio
Date: 2018/9/18
Desc: 
http://localhost:8099/api/mod/nplcad/models/nplcad/check
http://localhost:8099/api/mod/nplcad/models/nplcad/runcode
http://localhost:8099/api/mod/nplcad/models/nplcad/loadblocklyeditor?blocktype=paracraft
http://localhost:8099/api/mod/nplcad/models/nplcad/loadblocklyeditor?blocktype=blockcad
http://localhost:8099/api/mod/nplcad/models/nplcad/loadblocklyeditor?blocktype=npl_microbit
http://localhost:8099/api/mod/nplcad/models/nplcad/loadeditor
http://localhost:8099/api/mod/nplcad/models/nplcad/saveeditor
]]

include_once(WIKI_ROOT.."models/abstract/base.page");


NPL.load("(gl)script/ide/System/localserver/UrlHelper.lua");
local UrlHelper = commonlib.gettable("System.localserver.UrlHelper");
NPL.load("(gl)script/ide/Files.lua");

NPL.load("(gl)Mod/NplCad2/main.lua");
local NplCad2 = commonlib.gettable("Mod.NplCad2")

NPL.load("(gl)script/ide/System/Encoding/base64.lua");
local Encoding = commonlib.gettable("System.Encoding");
NPL.load("(gl)script/ide/log.lua");

local nplcad = inherit(models.abstract.base, gettable("models.nplcad"));

include_once("./nplcad_git_repo.page");

NPL.load("(gl)script/ide/Json.lua");
local NplOceConnection = NPL.load("Mod/NplCad2/NplOceConnection.lua");
local lastErrorCallstack = "";

function nplcad:api_check()
    return {true}
end
-- convert the download path to lower case
-- @param {string|array} input 
function nplcad.tolowerPath(input)
     if(not input)then
        return
     end
     if(type(input) == "string")then
        input = string.lower(input);
     elseif(type(input) == "table")then
        for k,v in ipairs(input) do
            if(type(v) == "string")then
                input[k] = string.lower(v);
            end
        end
     end
     return input;
end
function nplcad.copyFiles(input_files,output_root_folder)
    if(not input_files)then
        return
    end
    local result = {};
    for k,v in ipairs(input_files) do
        local filename = nplcad.save_to_file(v,output_root_folder)
        table.insert(result,filename);
    end
    return result;
end
function nplcad.save_to_file(asset_file_name,output_root_folder)
    local content;
    local file = ParaIO.OpenAssetFile(asset_file_name);
    if(file:IsValid()) then	
        content = file:GetText(0, -1);
        file:close();
    end
    local filename = string.format("%s/%s",output_root_folder,asset_file_name);
    LOG.std(nil,"info","nplcad.save_to_file", filename);
    if(content)then
        LOG.std(nil,"info","nplcad.save_to_file content size", #content);
        ParaIO.CreateDirectory(filename);
        local file = ParaIO.open(filename, "w");
        if(file:IsValid()) then	
            file:WriteString(content,#content);
            file:close();
        end
    else
        LOG.std(nil,"info","nplcad.save_to_file content is null");
    end
    return filename;
end
function nplcad.loadAssetFile(asset_file_name,callback)
    LOG.std(nil,"info","nplcad.loadAssetFile", asset_file_name);
    NPL.load("(gl)script/ide/AssetPreloader.lua");
    local loader = commonlib.AssetPreloader:new({
	    callbackFunc = function(nItemsLeft, loader)
		    if(nItemsLeft <= 0) then
                if(callback)then
                    callback();
                end
		    end
	    end
    });
    loader:AddAssets(asset_file_name);
    loader:Start();
end
-- export bmax to parax
function nplcad:api_exportBMaxToParaX(input)
    local content = input.content;
    if(not content)then
        return
    end
    NPL.load("(gl)Mod/ParaXExporter/main.lua");
    local ParaXExporter = commonlib.gettable("Mod.ParaXExporter");
    local filename = "temp/temp.bmax"
    local parax_filename = "temp/temp.x"

    ParaIO.CreateDirectory(filename);
    local file = ParaIO.open(filename, "w");
    if(file:IsValid()) then	
        file:WriteString(content,#content);
        file:close();
    end
    ParaXExporter:Export(filename, parax_filename, false, true);

    local file = ParaIO.open(parax_filename, "r");
    local data;
    if(file:IsValid()) then	
        data = file:GetText(0,-1);
        file:close();
        data = Encoding.base64(data);
    end

    return {
        data = data;
    }
end
-- download .x and its textures from assets server and export to gltf
-- @param input.content - asset path, like this: character/CC/03animals/treemonster/treemonster.x
function nplcad:api_exportParaXToGltf(input)
    ParaAsset.SetAssetServerUrl("http://cdn.keepwork.com/update61/assetdownload/update/");
    local asset_file_name = input.content;
    local output_root_folder = "temp/parax_to_gltf";
    local filename;
    local textures = {};
    nplcad.loadAssetFile(asset_file_name,function()

        filename = nplcad.save_to_file(asset_file_name,output_root_folder);
        textures = ParaScene.GetParaXTexturesFromFile(filename);

        -- download textures
        nplcad.loadAssetFile(textures,function()
            resume();
        end)
    end)
    yield();
    local raw_textures = textures;
    textures = nplcad.copyFiles(textures,output_root_folder);
    -- testing write file
    ParaScene.ParaXFileExportTo_glTF_File(filename,output_root_folder .. "/test_file.gltf", textures, false,true);

    local data = ParaScene.ParaXFileExportTo_glTF_String(filename,false,textures);
    return {
        data = data,
        textures = raw_textures,
    }
end
-- export .x buffter to gltf, make sure its textures are existed in right path
-- @param input.content - the buffer of .x file
function nplcad:api_exportLocalParaXToGltf(input)
    ParaAsset.SetAssetServerUrl("http://cdn.keepwork.com/update61/assetdownload/update/");
    local content = input.content;
    if(content)then
        content = Encoding.unbase64(content);
        local size = #content;
        local textures = ParaScene.GetParaXTexturesFromBuffer(content,size);

         -- download textures
        nplcad.loadAssetFile(textures,function()
            resume();
        end)
        yield();
        local raw_textures = textures;
        
        local output_root_folder = "temp/parax_to_gltf";
        textures = nplcad.copyFiles(textures,output_root_folder);

        local data = ParaScene.ParaXBufferExportTo_glTF_String(content,size,false,textures);
        return {
            data = data,
            textures = raw_textures,
        }
    end
end
function nplcad:api_loadeditorlist(input)
    local filename = string.format("%snplcad_editor/editor_meta.json",GameLogic.GetWorldDirectory())
    local editor_meta;
    nplcad:_loadAllEditorMeta(function(data)
        editor_meta = data;
		resume();
    end)
    yield();
    local filepath = string.format("%snplcad_editor/files",GameLogic.GetWorldDirectory());
    local result = commonlib.Files.Find({}, filepath, 10, 5000, function(item)
	    local ext = commonlib.Files.GetFileExtension(item.filename);
	    if(ext) then
		    return (ext == "json")
	    end
    end)
    return { 
        success = true,
        data = result,
        editor_meta = editor_meta,
    }
end
function nplcad:api_deleteeditor(input)
    local editor_id = input.editor_id;
    if(not editor_id or editor_id == "")then
        return { success = false }
    end
    editor_id = UrlHelper.url_decode(editor_id)
    local filename = string.format("%snplcad_editor/files/%s.json",GameLogic.GetWorldDirectory(), editor_id)
	if(not ParaIO.DoesFileExist(filename)) then
        return { success = false }
    end
    if(ParaIO.DeleteFile(filename))then
        nplcad:_saveEditorMeta(editor_id,nil,function()
        end)
        return { success = true}
    end
    return { success = false }
end
-- load editor with json
function nplcad:api_loadeditor(input)
    local editor_id = input.editor_id;
    if(not editor_id or editor_id == "")then
        return { success = false }
    end
    editor_id = UrlHelper.url_decode(editor_id)
    local content;
    local filename = string.format("%snplcad_editor/files/%s.json",GameLogic.GetWorldDirectory(), editor_id)
	if(not ParaIO.DoesFileExist(filename)) then
        return { success = false }
    end

    local file = ParaIO.open(filename, "r");
	if(file:IsValid()) then
		content = file:GetText();
		file:close();
		resume();
	end
    yield();
    return {
        success = true,
        data = content,
    }
end
function nplcad:_saveEditorMeta(editor_id,v,callback)
    if(not editor_id or not v)then
        if(callback)then
            callback()
        end
        return
    end
    self:_loadAllEditorMeta(function(result)
        if(result)then
            result[editor_id] = v;
            local content = NPL.ToJson(result, true)
            local filename = string.format("%snplcad_editor/editor_meta.json",GameLogic.GetWorldDirectory())
            ParaIO.CreateDirectory(filename);
            local file = ParaIO.open(filename, "w");
	        if(file:IsValid()) then
		        file:WriteString(content);
		        file:close();
                if(callback)then
                    callback()
                end
	        end
        end
    end)
end
function nplcad:_loadAllEditorMeta(callback)
    local filename = string.format("%snplcad_editor/editor_meta.json",GameLogic.GetWorldDirectory())
    if(not ParaIO.DoesFileExist(filename)) then
            if(callback)then
                callback({})
            end
        return 
    end
    local file = ParaIO.open(filename, "r");
    local content;
	if(file:IsValid()) then
		content = file:GetText();
		file:close();
        content = content or "{}";
        local out={};
        if(NPL.FromJson(content, out)) then
            if(callback)then
                callback(out)
            end
        end
	end
end
-- save editor with json
function nplcad:api_saveeditor(input)
    local content = input.content;
    local editor_id = input.editor_id;
    if(not editor_id or editor_id == "")then
        return { success = false}
    end
    editor_id = UrlHelper.url_decode(editor_id)
    local name = input.name or "";
    local version = input.version;
    local preview_png = input.preview_png;

    local editor_meta = {
        version = version,
        name = name,
    }
    nplcad:_saveEditorMeta(editor_id,editor_meta,function()
		resume();
    end)
    yield();

    local filename = string.format("%snplcad_editor/files/%s.json",GameLogic.GetWorldDirectory(), editor_id)
	ParaIO.CreateDirectory(filename);
    local file = ParaIO.open(filename, "w");
	if(file:IsValid()) then
		file:WriteString(content);
		file:close();
		resume();
	end
    yield();
     return {
        success = true,
    }
end
-- load blockly config
function nplcad:api_loadblocklyeditor(input)
    NPL.load("(gl)script/apps/Aries/Creator/Game/Common/Translation.lua");
	NPL.load("(gl)script/apps/Aries/Creator/Game/Code/CodeBlocklyGenerator.lua");
    local Translation = commonlib.gettable("MyCompany.Aries.Game.Common.Translation")

    local lang = Translation.GetCurrentLanguage();

	local CodeBlocklyGenerator = commonlib.gettable("MyCompany.Aries.Game.Code.CodeBlocklyGenerator");

    local blocktype = input.blocktype;


        NPL.load("(gl)script/apps/Aries/Creator/Game/Code/CodeHelpWindow.lua");
        local CodeHelpWindow = commonlib.gettable("MyCompany.Aries.Game.Code.CodeHelpWindow");
        if(blocktype == "paracraft")then
            CodeHelpWindow.SetLanguageConfigFile("npl")
        elseif(blocktype == "blockcad")then
            CodeHelpWindow.SetLanguageConfigFile("npl_cad")
        else
            CodeHelpWindow.SetLanguageConfigFile(blocktype)
        end
        local categories = CodeHelpWindow.GetCategoryButtons();
        local all_cmds = CodeHelpWindow.GetAllCmds();
        local code_generator = CodeBlocklyGenerator:new():OnInit(categories,all_cmds);

        local menu_xml = code_generator:GetBlocklyMenuXml();
		local config_json = code_generator:GetBlocklyConfig();
		local execution_str = code_generator:GetBlocklyCode();
		local keywords_json = code_generator:GetKeywords();
		return {
            lang = lang,
			menu_xml = menu_xml,
			config_json = config_json,
			execution_str = execution_str,
			keywords_json = keywords_json,
		};
end
-- Only build from a string,can't include any files
-- @param {Object} input
-- @param {string} input.code
function nplcad:api_runcode(input)
    local code = input.code;
    LOG.std(nil,"debug","nplcad:api_runcode_nploce beginning");
    local output = {};

	local nplcad_debug = ParaEngine.GetAppCommandLineByParam("nplcad_debug", false);
    local dll;
    if(nplcad_debug)then
        dll = "plugins/nploce_d.dll"
    else
        dll = "plugins/nploce.dll"
    end
    NplOceConnection.load({ npl_oce_dll = dll },function(msg)
        if(msg == true)then
			resume();
        end
    end);
    yield();
    if(code and code ~= "")then
        local build_type = input.build_type
        local swapYZ = input.swapYZ
        local func_str = nplcad.do_string;
        local str;
        if(build_type == "parax")then
            str = nplcad.getcode_export_parax(code)
        elseif(build_type == "stl")then
            str = nplcad.getcode_export_stl(code, swapYZ)
        elseif(build_type == "before_scene_code_xml")then
            str = nplcad.getcode_export_before_scene_code_xml(code)
        elseif(build_type == "scene_code_xml")then
            str = nplcad.getcode_export_scene_code_xml(code)
        else
            str = nplcad.getcode(code)
        end
        local code_func, errormsg = nplcad.compile_code(str);
        if(not code_func and errormsg)then
            output.ok = false;
            output.result = errormsg;
        else
            local ok, result = xpcall(code_func,nplcad.handle_err);
            if(not ok)then
			    LOG.std(nil, "error", "nplcad:api_runcode", "%s\n%s", result, lastErrorCallstack);
            end
            output.ok = ok;
            output.result = result;
        end
    end
    return output; 
end
function nplcad.handle_err(x)
    lastErrorCallstack = commonlib.debugstack(2, 5, 1);
	return x;
end
function nplcad.compile_code(str)
    local code_func, errormsg = loadstring(str);
    return code_func, errormsg;
end
function nplcad.getcode(str)
    local s = string.format([[
        local SceneHelper = NPL.load("Mod/NplCad2/SceneHelper.lua");
        local ShapeBuilder = NPL.load("Mod/NplCad2/Blocks/ShapeBuilder.lua");
        _G.ShapeBuilder = ShapeBuilder;
        ShapeBuilder.create()
        SceneHelper.installMethods(_G, ShapeBuilder)
        %s
        SceneHelper.run(ShapeBuilder.getScene(),false);
        local s = ShapeBuilder.toJson();
        _G.ShapeBuilder = nil;
        return s;
    ]],str);
    return s;
end
function nplcad.getcode_export_stl(str, swapYZ)
    local s = string.format([[
        local SceneHelper = NPL.load("Mod/NplCad2/SceneHelper.lua");
        local ShapeBuilder = NPL.load("Mod/NplCad2/Blocks/ShapeBuilder.lua");
        _G.ShapeBuilder = ShapeBuilder;
        ShapeBuilder.create()
        SceneHelper.installMethods(_G, ShapeBuilder)
        %s
        SceneHelper.run(ShapeBuilder.getScene(),false);
        local s = ShapeBuilder.toStl(%s);
        _G.ShapeBuilder = nil;
        return s;
    ]], str, swapYZ);
    return s;
end
function nplcad.getcode_export_parax(str)
    local s = string.format([[
        NPL.load("(gl)script/ide/System/Encoding/base64.lua");
        local Encoding = commonlib.gettable("System.Encoding");

        local SceneHelper = NPL.load("Mod/NplCad2/SceneHelper.lua");
        local ShapeBuilder = NPL.load("Mod/NplCad2/Blocks/ShapeBuilder.lua");
        _G.ShapeBuilder = ShapeBuilder;
        ShapeBuilder.create()
        SceneHelper.installMethods(_G, ShapeBuilder)
        %s
        local scene = ShapeBuilder.getScene();
        SceneHelper.run(scene,false);
        local s = SceneHelper.toParaX(scene);
        s = Encoding.base64(s);
        _G.ShapeBuilder = nil;
        return s;
    ]],str);
    return s;
end
function nplcad.getcode_export_before_scene_code_xml(str)
    local s = string.format([[
        local SceneHelper = NPL.load("Mod/NplCad2/SceneHelper.lua");
        local ShapeBuilder = NPL.load("Mod/NplCad2/Blocks/ShapeBuilder.lua");
        _G.ShapeBuilder = ShapeBuilder;
        ShapeBuilder.create()
        SceneHelper.installMethods(_G, ShapeBuilder)
        %s
        local s = SceneHelper.getXml(ShapeBuilder.getScene())
        _G.ShapeBuilder = nil;
        return s;
    ]],str);
    return s;
end
function nplcad.getcode_export_scene_code_xml(str)
    local s = string.format([[
        local SceneHelper = NPL.load("Mod/NplCad2/SceneHelper.lua");
        local ShapeBuilder = NPL.load("Mod/NplCad2/Blocks/ShapeBuilder.lua");
        _G.ShapeBuilder = ShapeBuilder;
        ShapeBuilder.create()
        SceneHelper.installMethods(_G, ShapeBuilder)
        %s
        SceneHelper.run(ShapeBuilder.getScene(),false);
        local s = SceneHelper.getXml(ShapeBuilder.getScene())
        _G.ShapeBuilder = nil;
        return s;
    ]],str);
    return s;
end


