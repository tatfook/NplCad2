<?npl
--[[
Title: nplcad.page
Author: leio
Date: 2018/9/18
Desc: 
http://localhost:8099/api/mod/nplcad/models/nplcad/check
http://localhost:8099/api/mod/nplcad/models/nplcad/runcode
http://localhost:8099/api/mod/nplcad/models/nplcad/loadblocklyeditor?blocktype=paracraft
http://localhost:8099/api/mod/nplcad/models/nplcad/loadblocklyeditor?blocktype=blockcad
]]

include_once(WIKI_ROOT.."models/abstract/base.page");


NPL.load("(gl)script/ide/System/Encoding/base64.lua");
local Encoding = commonlib.gettable("System.Encoding");

local nplcad = inherit(models.abstract.base, gettable("models.nplcad"));

NPL.load("(gl)script/ide/Json.lua");
local NplOceConnection = NPL.load("Mod/NplCad2/NplOceConnection.lua");
local lastErrorCallstack = "";

function nplcad:api_check()
    return {true}
end
function nplcad:api_exportParaXToGltf(input)
    local content = input.content;
    content = Encoding.unbase64(content);

    local filename = "character/temp_export/test.x"
    ParaIO.CreateDirectory(filename);
    local file = ParaIO.open(filename, "w");
    if(file:IsValid()) then	
        file:WriteString(content,#content);
        file:close();
    end

    -- testing write file
    ParaScene.ParaXExportTo_glTF(filename,"character/temp_export/test_file.gltf", false,true);

    -- testing write string
    local data = ParaScene.ParaXExportTo_glTF_String(filename,false);
    local outpath = "character/temp_export/test.gltf"
    local file = ParaIO.open(outpath, "w");
    if(file:IsValid()) then	
        file:WriteString(data,#data);
        file:close();
    end

    return {
        data = data,
    }
end
-- load blockly config
function nplcad:api_loadblocklyeditor(input)
    NPL.load("(gl)script/apps/Aries/Creator/Game/Common/Translation.lua");
	NPL.load("(gl)script/apps/Aries/Creator/Game/Code/CodeBlocklyGenerator.lua");
    local Translation = commonlib.gettable("MyCompany.Aries.Game.Common.Translation")

    local lang = Translation.GetCurrentLanguage();

	local CodeBlocklyGenerator = commonlib.gettable("MyCompany.Aries.Game.Code.CodeBlocklyGenerator");

    local blocktype = input.blocktype;


        NPL.load("(gl)script/apps/Aries/Creator/Game/Code/CodeHelpWindow.lua");
        local CodeHelpWindow = commonlib.gettable("MyCompany.Aries.Game.Code.CodeHelpWindow");
        if(blocktype == "paracraft")then
            CodeHelpWindow.SetLanguageConfigFile("npl")
        elseif(blocktype == "blockcad")then
            CodeHelpWindow.SetLanguageConfigFile("npl_cad")
        else
            CodeHelpWindow.SetLanguageConfigFile(blocktype)
        end
        local categories = CodeHelpWindow.GetCategoryButtons();
        local all_cmds = CodeHelpWindow.GetAllCmds();
        local code_generator = CodeBlocklyGenerator:new():OnInit(categories,all_cmds);

        local menu_xml = code_generator:GetBlocklyMenuXml();
		local config_json = code_generator:GetBlocklyConfig();
		local execution_str = code_generator:GetBlocklyCode();
		local keywords_json = code_generator:GetKeywords();
		return {
            lang = lang,
			menu_xml = menu_xml,
			config_json = config_json,
			execution_str = execution_str,
			keywords_json = keywords_json,
		};
end
-- Only build from a string,can't include any files
-- @param {Object} input
-- @param {string} input.code
function nplcad:api_runcode(input)
    local code = input.code;
    LOG.std(nil,"debug","nplcad:api_runcode_nploce beginning");
    local output = {};

	local nplcad_debug = ParaEngine.GetAppCommandLineByParam("nplcad_debug", false);
    local dll;
    if(nplcad_debug)then
        dll = "plugins/nploce_d.dll"
    else
        dll = "plugins/nploce.dll"
    end
    NplOceConnection.load({ npl_oce_dll = dll },function(msg)
        if(msg == true)then
			resume();
        end
    end);
    yield();
    if(code)then
        local build_type = input.build_type
        local func_str = nplcad.do_string;
        local str;
        if(build_type == "parax")then
            str = nplcad.getcode_export_parax(code)
        elseif(build_type == "before_scene_code_xml")then
            str = nplcad.getcode_export_before_scene_code_xml(code)
        elseif(build_type == "scene_code_xml")then
            str = nplcad.getcode_export_scene_code_xml(code)
        else
            str = nplcad.getcode(code)
        end
        local code_func, errormsg = nplcad.compile_code(str);
        if(not code_func and errormsg)then
            output.ok = false;
            output.result = errormsg;
        else
            local ok, result = xpcall(code_func,nplcad.handle_err);
            if(not ok)then
			    LOG.std(nil, "error", "nplcad:api_runcode", "%s\n%s", result, lastErrorCallstack);
            end
            output.ok = ok;
            output.result = result;
        end
    end
    return output; 
end
function nplcad.handle_err(x)
    lastErrorCallstack = commonlib.debugstack(2, 5, 1);
	return x;
end
function nplcad.compile_code(str)
    local code_func, errormsg = loadstring(str);
    return code_func, errormsg;
end
function nplcad.getcode(str)
    local s = string.format([[
        local SceneHelper = NPL.load("Mod/NplCad2/SceneHelper.lua");
        local ShapeBuilder = NPL.load("Mod/NplCad2/Blocks/ShapeBuilder.lua");
        _G.ShapeBuilder = ShapeBuilder;
        ShapeBuilder.create()
        ShapeBuilder.setYUp(true);
        SceneHelper.installMethods(_G, ShapeBuilder)
        %s
        SceneHelper.run(ShapeBuilder.getScene(),false);
        local s = ShapeBuilder.toJson();
        _G.ShapeBuilder = nil;
        return s;
    ]],str);
    return s;
end
function nplcad.getcode_export_parax(str)
    local s = string.format([[
        NPL.load("(gl)script/ide/System/Encoding/base64.lua");
        local Encoding = commonlib.gettable("System.Encoding");

        local SceneHelper = NPL.load("Mod/NplCad2/SceneHelper.lua");
        local ShapeBuilder = NPL.load("Mod/NplCad2/Blocks/ShapeBuilder.lua");
        _G.ShapeBuilder = ShapeBuilder;
        ShapeBuilder.create()
        ShapeBuilder.setYUp(true);
        SceneHelper.installMethods(_G, ShapeBuilder)
        %s
        SceneHelper.run(ShapeBuilder.getScene(),false);
        local s = NplOce.exportToParaX(ShapeBuilder.getScene(),true)
        s = Encoding.base64(s);
        _G.ShapeBuilder = nil;
        return s;
    ]],str);
    return s;
end
function nplcad.getcode_export_before_scene_code_xml(str)
    local s = string.format([[
        local SceneHelper = NPL.load("Mod/NplCad2/SceneHelper.lua");
        local ShapeBuilder = NPL.load("Mod/NplCad2/Blocks/ShapeBuilder.lua");
        _G.ShapeBuilder = ShapeBuilder;
        ShapeBuilder.create()
        ShapeBuilder.setYUp(true);
        SceneHelper.installMethods(_G, ShapeBuilder)
        %s
        local s = SceneHelper.getXml(ShapeBuilder.getScene())
        _G.ShapeBuilder = nil;
        return s;
    ]],str);
    return s;
end
function nplcad.getcode_export_scene_code_xml(str)
    local s = string.format([[
        local SceneHelper = NPL.load("Mod/NplCad2/SceneHelper.lua");
        local ShapeBuilder = NPL.load("Mod/NplCad2/Blocks/ShapeBuilder.lua");
        _G.ShapeBuilder = ShapeBuilder;
        ShapeBuilder.create()
        ShapeBuilder.setYUp(true);
        SceneHelper.installMethods(_G, ShapeBuilder)
        %s
        SceneHelper.run(ShapeBuilder.getScene(),false);
        local s = SceneHelper.getXml(ShapeBuilder.getScene())
        _G.ShapeBuilder = nil;
        return s;
    ]],str);
    return s;
end


